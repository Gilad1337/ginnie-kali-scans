#!/bin/bash
# Common functions used across all modules
set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Global variables
ARTIFACT_DIR=""
RATE_LIMIT="${RATE_LIMIT:-50}"
MODE="${MODE:-passive}"

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1" >&2
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1" >&2
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1" >&2
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

# Check Rules of Engagement
check_roe() {
    if [[ ! -f ../../AUTHORIZATION/authorization.json ]]; then
        log_error "ROE missing: AUTHORIZATION/authorization.json not found"
        exit 1
    fi
    
    if ! command -v jq &> /dev/null; then
        log_error "jq is required for JSON parsing"
        exit 1
    fi
    
    if ! jq -e '.authorized == true' ../../AUTHORIZATION/authorization.json > /dev/null; then
        log_error "Not authorized: authorization.json must have 'authorized': true"
        exit 1
    fi
    
    # Check maintenance window (basic implementation)
    local current_time start_time end_time
    current_time=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
    start_time=$(jq -r '.windows[0].start' ../../AUTHORIZATION/authorization.json)
    end_time=$(jq -r '.windows[0].end' ../../AUTHORIZATION/authorization.json)
    
    if [[ "$start_time" != "null" && "$end_time" != "null" ]]; then
        if [[ "$current_time" < "$start_time" || "$current_time" > "$end_time" ]]; then
            log_warning "Outside maintenance window. Proceeding with caution."
        fi
    fi
    
    log_success "ROE checks passed"
}

# Setup logging and artifact directory
setup_logging() {
    local module_name="$1"
    ARTIFACT_DIR="../../reports/artifacts/$(date +%Y%m%d_%H%M%S)_${module_name}"
    mkdir -p "$ARTIFACT_DIR"
    
    log_info "Artifact directory: $ARTIFACT_DIR"
}

# Parse domains from configuration
parse_domains_from_config() {
    if [[ -f ../../config/scopes.example.yaml ]]; then
        yq '.environments.production.domains[]' ../../config/scopes.example.yaml 2>/dev/null || echo ""
    else
        jq -r '.in_scope.domains[]' ../../AUTHORIZATION/authorization.json 2>/dev/null || echo ""
    fi
}

# Parse CIDR ranges from configuration
parse_cidr_from_config() {
    if [[ -f ../../config/scopes.example.yaml ]]; then
        yq '.environments.production.cidr[]' ../../config/scopes.example.yaml 2>/dev/null || echo ""
    else
        jq -r '.in_scope.cidr[]' ../../AUTHORIZATION/authorization.json 2>/dev/null || echo ""
    fi
}

# Parse GCP projects from configuration
parse_gcp_projects_from_config() {
    if [[ -f ../../config/scopes.example.yaml ]]; then
        yq '.environments.production.gcp_projects[]' ../../config/scopes.example.yaml 2>/dev/null || echo ""
    else
        jq -r '.in_scope.gcp_projects[]' ../../AUTHORIZATION/authorization.json 2>/dev/null || echo ""
    fi
}

# Write standard findings JSON
write_findings() {
    local findings_file="$ARTIFACT_DIR/findings.json"
    local title="$1"
    local evidence="$2"
    local impact="$3"
    local recommendation="$4"
    
    cat > "$findings_file" << EOF
{
  "scan_date": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
  "module": "$(basename "$(dirname "$0")")",
  "findings": [
    {
      "id": "$(uuidgen 2>/dev/null || echo "generated-$(date +%s)")",
      "title": "$title",
      "evidence": "$evidence",
      "impact": "$impact",
      "recommendation": "$recommendation",
      "cvss": "TBD",
      "context": "Ginnie Smart Homes assessment",
      "owner": "Security Team",
      "eta": "30 days",
      "attack_mappings": []
    }
  ]
}
EOF
}

# Write standard report
write_report() {
    local report_file="$ARTIFACT_DIR/report.md"
    local module_name="$1"
    local summary="$2"
    
    cat > "$report_file" << EOF
# $module_name Security Assessment Report

## Executive Summary
- **Date:** $(date)
- **Module:** $module_name
- **Scope:** $(parse_domains_from_config | tr '\n' ' ')
- **Mode:** $MODE

## Summary
$summary

## Artifacts
- Raw output files are in this directory
- findings.json contains structured findings
- See individual tool outputs for detailed information

## Recommendations
1. Review all findings in findings.json
2. Prioritize high/critical issues
3. Implement recommended mitigations
4. Schedule follow-up assessments

---
*Generated by Ginnie Cybersecurity Toolkit*
EOF
}

# Cleanup function
cleanup() {
    local temp_files=("$@")
    for file in "${temp_files[@]}"; do
        [[ -f "$file" ]] && rm -f "$file"
    done
}

# Rate limiting function
rate_limit() {
    if [[ "${RATE_LIMIT:-50}" -gt 0 ]]; then
        sleep $((60 / RATE_LIMIT))
    fi
}

# Check if in scope
check_scope() {
    local target="$1"
    local in_scope_domains in_scope_cidr
    
    in_scope_domains=$(parse_domains_from_config)
    in_scope_cidr=$(parse_cidr_from_config)
    
    # Check domains
    for domain in $in_scope_domains; do
        if [[ "$target" == *"$domain"* ]]; then
            return 0
        fi
    done
    
    # Check CIDR (basic implementation)
    for cidr in $in_scope_cidr; do
        if [[ "$target" == *"$(echo "$cidr" | cut -d'/' -f1 | cut -d'.' -f1-2)"* ]]; then
            return 0
        fi
    done
    
    log_warning "Target $target may be out of scope"
    return 1
}

# Validate tool availability
require_tool() {
    local tool="$1"
    if ! command -v "$tool" &> /dev/null; then
        log_error "Required tool not found: $tool"
        exit 1
    fi
}

# Safe tool execution with timeout and error handling
safe_execute() {
    local timeout_duration="$1"
    shift
    local cmd=("$@")
    
    log_info "Executing: ${cmd[*]}"
    
    if timeout "$timeout_duration" "${cmd[@]}" 2>/dev/null; then
        log_success "Command completed successfully"
        return 0
    else
        log_warning "Command failed or timed out: ${cmd[*]}"
        return 1
    fi
}
